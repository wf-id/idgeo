% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/leaflet_controls.R
\name{addPrettyPolygons}
\alias{addPrettyPolygons}
\title{Pretty Leaflet Polygons}
\usage{
addPrettyPolygons(
  map,
  zcol = NULL,
  palette = NULL,
  reverse = NULL,
  domain = NULL,
  percent = FALSE,
  legend = !is.null(zcol),
  legendposition = "bottomright",
  legendtitle = zcol,
  fillColor = NULL,
  fillOpacity = 0.6,
  stroke = T,
  color = "white",
  weight = 1,
  opacity = 1,
  highlightOptions = NULL,
  label = NULL,
  labelOptions = NULL,
  data = leaflet::getMapData(map),
  ...
)
}
\arguments{
\item{map}{a leaflet map}

\item{zcol}{optional, column in map data to use for filling polygons. Ignored
if \code{fillColor} argument is supplied}

\item{palette}{a string, palette for filling polygons (default is viridis
for numeric and Okabe-Ito for character/factor), supplied to either
\code{\link[leaflet]{colorNumeric}} or \code{\link[leaflet]{colorFactor}}
for numeric and character/factor respectively}

\item{reverse}{whether to reverse the \code{palette}, ignored if \code{zcol}
is \code{NULL}}

\item{domain}{domain used for the \code{palette}, ignored if \code{zcol}
is \code{NULL}. the default \code{domain = NULL} will use all observations
in \code{zcol} as the range}

\item{percent}{whether to format numeric \code{zcol} palette with percents.
default \code{FALSE}, ignored if \code{zcol} is \code{NULL}.}

\item{legend}{logical whether or not to create a legend for \code{zcol},
ignored if \code{zcol} is \code{NULL}}

\item{legendposition}{position of \code{zcol} legend, default 'bottomright',
ignored if \code{zcol} is \code{NULL}}

\item{legendtitle}{title of \code{zcol} legend, defaults to \code{zcol},
ignored if \code{zcol} is \code{NULL}}

\item{fillColor}{fill color, string of length 1 or same length as data. For simple
palette generation leave this \code{NULL} and supply \code{zcol} instead,
with optional supporting arguments: palette, percent, reverse, domain.
For more complex palettes, typically a function is created via
\code{leaflet::colorXXXXX()} that is then applied to a column in the data.
Note: you will need to add your own legend if using this argument.}

\item{fillOpacity}{fill opacity of the polygons, default is \code{0.6}}

\item{stroke}{whether or not to draw borders on the polygons}

\item{color}{color of the polygon borders}

\item{weight}{weight of the polygon borders in pixels}

\item{opacity}{opacity of the polygon borders}

\item{highlightOptions}{Options for highlighting the shape on mouse over,
created using \code{leaflet::highlightOptions} function. Default is
\code{highlightOptions(stroke = T, weight = 3, fillOpacity = 0.67)}}

\item{label}{label shown on hover. For a variable in your data use
\code{~column_name}. Can be HTML, and will automatically
convert to HTML it is not already. See these w3 resources for
\href{https://www.w3schools.com/html/html_styles.asp}{styles} &
\href{https://www.w3schools.com/html/html_formatting.asp}{formatting}}

\item{labelOptions}{Options for the labels that appear on hover. Defaults to
\code{\link[idgeo]{IDLabelOptions}}}

\item{data}{the data object from which the argument values are derived; by default,
it is the data object provided to leaflet() or prettyLeaflet() initially,
but can be overridden}

\item{...}{any additional parameters supplied to
\code{\link[leaflet]{addPolygons}}, notably "fillColor" and "group"
for fillin and layering the polygons}
}
\description{
This function can be used in place of
\code{\link[leaflet]{addPolygons}} and will apply many helper and style
functions for quick consistent maps.
}
